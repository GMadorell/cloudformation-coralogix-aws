AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Send Kinesis Firehose stream data to Coralogix.

Parameters:
  CoralogixRegion:
    Type: String
    Description: The Coralogix location region
    AllowedValues:
      - Ireland
      - Stockholm
      - India
      - Singapore
      - US
    Default: Ireland
  CoralogixApiKey:
    Type: String
    Description: The Coralogix Api key which is used to validate your authenticity - REQUIRED
    NoEcho: true
  ApplicationName:
    Type: String
    Description: The desired applicationName within the Coralogix Platform
    Default: ""
  SubsystemName:
    Type: String
    Description: The desired subsystemName within the Coralogix Platform
    Default: ""
  CloudwatchRetentionDays:
    Type: Number
    Description: Days of retention in Cloudwatch retention days
    Default: 1
  SourceTypeLogs:
    Type: String
    Description: The source_type of kinesis firehose logs - DirectPut or KinesisStreamAsSource
    AllowedValues:
      - DirectPut
      - KinesisStreamAsSource
    Default: DirectPut
  KinesisStreamARN:
    Type: String
    Description: If using KinesisStreamAsSource, enter the ARN of the Kinesis stream
    Default: ""
  IntegrationTypeLogs:
    Type: String
    Description: The data structure of the Firehose delivery stream for logs
    AllowedValues:
      - ""
      - CloudWatch_JSON
      - WAF
      - CloudWatch_CloudTrail
      - EksFargate
      - Default
      - RawText
    Default: ""
  IntegrationTypeMetrics:
    Type: String
    Description: The integration type of the firehose delivery stream
    AllowedValues:
      - CloudWatch_Metrics_OpenTelemetry070
      - CloudWatch_Metrics_JSON
    Default: CloudWatch_Metrics_OpenTelemetry070
  OutputFormat:
    Type: String
    Description: The output format of the cloudwatch metric stream
    AllowedValues:
      - opentelemetry0.7
      - json
    Default: opentelemetry0.7
  DynamicMetadata:
    Type: String
    Description: When set to true, it fetches set the applicationName / subsystemName dynamically
    AllowedValues:
      - ""
      - 'true'
      - 'false'
    Default: ""
Mappings:
  CoralogixRegionMap:
    Ireland:
      LogUrl: https://firehose-ingress.coralogix.com/firehose
    Stockholm:
      LogUrl: https://firehose-ingress.eu2.coralogix.com/firehose
    India:
      LogUrl: https://firehose-ingress.coralogix.in/firehose
    Singapore:
      LogUrl: https://firehose-ingress.coralogixsg.com/firehose
    US:
      LogUrl: https://firehose-ingress.coralogix.us/firehose

Conditions:
  IsApplicationName: !Not [!Equals [!Ref ApplicationName, ""]]
  IsSubsystemName: !Not [!Equals [!Ref SubsystemName, ""]]
  IsIntegrationTypeLogs: !Not [!Equals [!Ref IntegrationTypeLogs, ""]]
  IsDynamicMetadata: !Not [!Equals [ !Ref DynamicMetadata, ""]]
  IsKinesisStreamAsSource: !Equals [ !Ref SourceTypeLogs, 'KinesisStreamAsSource']

Resources:
  BackupDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-backup'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  DeliveryStreamLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/kinesisfirehose/${AWS::StackName}'
      RetentionInDays: !Ref CloudwatchRetentionDays
  DeliveryStreamLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref DeliveryStreamLogGroup
      LogStreamName: !Ref AWS::StackName

###################################
# Firehose Logs Stream
###################################
  CloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: !Sub 'logs.${AWS::Region}.amazonaws.com'
          Action: sts:AssumeRole
  CloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-logs-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - firehose:PutRecord
          - firehose:PutRecordBatch
          - kinesis:PutRecord
          - kinesis:PutRecordBatch
          Resource:
          - !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:*'
        - Effect: Allow
          Action:
          - iam:PassRole
          Resource:
          - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${CloudWatchLogsRole}'
      Roles:
      - Ref: CloudWatchLogsRole
  FirehoseLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: 'firehose.amazonaws.com'
          Action: sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId:
                Ref: AWS::AccountId
  FirehoseLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-firehose-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:AbortMultipartUpload
          - s3:GetBucketLocation
          - s3:GetObject
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          - s3:PutObject
          Resource:
          - !Sub 'arn:aws:s3:::${BackupDataBucket}'
          - !Sub 'arn:aws:s3:::${BackupDataBucket}/*'
        - Effect: Allow
          Action:
          - logs:PutLogEvents
          Resource: !GetAtt DeliveryStreamLogGroup.Arn
        - Effect: Allow
          Action:
            - kinesis:DescribeStream
            - kinesis:GetShardIterator
            - kinesis:GetRecords
            - kinesis:ListShards
          Resource: 
          - !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/*'
          - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/*'
      Roles:
      - Ref: FirehoseLogsRole
  CoralogixDeliveryLogsStream:
    DependsOn:
    - FirehoseLogsPolicy
    - CloudWatchLogsPolicy
    - BackupDataBucket
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${AWS::StackName}-logs'
      DeliveryStreamType: !Ref SourceTypeLogs
      KinesisStreamSourceConfiguration:
        !If
          - IsKinesisStreamAsSource
          - KinesisStreamARN: !Ref KinesisStreamARN
            RoleARN: !GetAtt FirehoseLogsRole.Arn
          - !Ref 'AWS::NoValue'
      HttpEndpointDestinationConfiguration:
        RoleARN:
          !GetAtt FirehoseLogsRole.Arn
        EndpointConfiguration:
          Url: 
            Fn::FindInMap: [ CoralogixRegionMap, !Ref CoralogixRegion, LogUrl ]
          AccessKey:
            Ref: CoralogixApiKey
          Name: 
            'Coralogix'
        RequestConfiguration:
          ContentEncoding: GZIP
          CommonAttributes:
            - !If 
              - IsApplicationName
              - AttributeName: 'applicationName'
                AttributeValue: !Ref ApplicationName
              - !Ref 'AWS::NoValue'
            - !If
              - IsSubsystemName
              - AttributeName: 'subsystemName'
                AttributeValue: !Ref SubsystemName
              - !Ref 'AWS::NoValue'
            - !If
              - IsIntegrationTypeLogs
              - AttributeName: 'integrationType'
                AttributeValue: !Ref IntegrationTypeLogs
              - !Ref 'AWS::NoValue'
            - !If
              - IsDynamicMetadata
              - AttributeName: 'dynamicMetadata'
                AttributeValue: !Ref DynamicMetadata
              - !Ref 'AWS::NoValue'
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName:
            Ref: DeliveryStreamLogGroup
          LogStreamName:
            Ref: DeliveryStreamLogStream
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 6
        RetryOptions:
          DurationInSeconds: 300
        S3BackupMode: FailedDataOnly
        S3Configuration:
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 5
          BucketARN: !GetAtt BackupDataBucket.Arn
          CompressionFormat: GZIP
          RoleARN:
            !GetAtt FirehoseLogsRole.Arn

###################################
# Firehose Metrics Stream
###################################
  CloudWatchMetricsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-cw'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: !Sub 'streams.metrics.cloudwatch.amazonaws.com'
          Action: sts:AssumeRole
  CloudWatchMetricsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-cw'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - firehose:PutRecord
          - firehose:PutRecordBatch
          - firehose:DeleteDeliveryStream
          - firehose:UpdateDestination
          Resource:
          - !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/*'
      Roles:
      - Ref: CloudWatchMetricsRole
  CloudWatchMetricStream:
    Type: AWS::CloudWatch::MetricStream
    DependsOn:
      - CoralogixDeliveryMetricsStream
      - CloudWatchMetricsRole
    Properties:
      Name: !Ref AWS::StackName
      FirehoseArn: !GetAtt CoralogixDeliveryMetricsStream.Arn
      RoleArn: !GetAtt CloudWatchMetricsRole.Arn
      OutputFormat: !Ref OutputFormat
  LambdaProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: !Sub 'lambda.amazonaws.com'
          Action: sts:AssumeRole
  LambdaProcessorPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-lambda'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - tag:GetResources
          - cloudwatch:GetMetricData
          - cloudwatch:GetMetricStatistics
          - cloudwatch:ListMetrics
          - apigateway:GET
          - aps:ListWorkspaces
          - autoscaling:DescribeAutoScalingGroups
          - dms:DescribeReplicationInstances
          - dms:DescribeReplicationTasks
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeSpotFleetRequests
          - storagegateway:ListGateways
          - storagegateway:ListTagsForResource
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*:*'
      Roles:
      - Ref: LambdaProcessorRole
  LambdaMetricsTagsProcessors:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Sub 'cx-cw-metrics-tags-lambda-processor-${AWS::Region}'
        S3Key: function.zip
      FunctionName: !Sub '${AWS::StackName}-metrics-transform'
      Handler: function
      Runtime: go1.x
      Role: !GetAtt LambdaProcessorRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          FILE_CACHE_PATH: "/tmp"
  FirehoseMetricsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-firehose'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: 'firehose.amazonaws.com'
          Action: sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId:
                Ref: AWS::AccountId
  FirehoseMetricsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-firehose'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:AbortMultipartUpload
          - s3:GetBucketLocation
          - s3:GetObject
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          - s3:PutObject
          Resource:
          - !Sub 'arn:aws:s3:::${BackupDataBucket}'
          - !Sub 'arn:aws:s3:::${BackupDataBucket}/*'
        - Effect: Allow
          Action:
          - logs:PutLogEvents
          Resource: !GetAtt DeliveryStreamLogGroup.Arn
        - Effect: Allow
          Action:
            - kinesis:DescribeStream
            - kinesis:GetShardIterator
            - kinesis:GetRecords
            - kinesis:ListShards
          Resource: 
          - !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/*'
          - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/*'
        - Effect: Allow
          Action:
          - kms:Decrypt
          - kms:GenerateDataKey
          Resource:
          - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'
          Condition:
            StringEquals:
              kms:ViaService: !Sub 's3.${AWS::Region}.amazonaws.com'
            StringLike:
              kms:EncryptionContext: !Sub 'arn:aws:s3:::${BackupDataBucket}'
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          - lambda:GetFunctionConfiguration
          Resource:
          - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
      Roles:
      - Ref: FirehoseMetricsRole
  CoralogixDeliveryMetricsStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
    - FirehoseMetricsPolicy
    - CloudWatchMetricsPolicy
    - BackupDataBucket
    - LambdaMetricsTagsProcessors
    Properties:
      DeliveryStreamName: !Sub '${AWS::StackName}-metrics'
      DeliveryStreamType: DirectPut
      HttpEndpointDestinationConfiguration:
        RoleARN:
          !GetAtt FirehoseMetricsRole.Arn
        EndpointConfiguration:
          Url: 
            Fn::FindInMap: [ CoralogixRegionMap, !Ref CoralogixRegion, LogUrl ]
          AccessKey:
            Ref: CoralogixApiKey
          Name: 
            'Coralogix'
        RequestConfiguration:
          ContentEncoding: GZIP
          CommonAttributes:
            - AttributeName: 'integrationType'
              AttributeValue: !Ref IntegrationTypeMetrics
            - !If 
              - IsApplicationName
              - AttributeName: 'applicationName'
                AttributeValue: !Ref ApplicationName
              - !Ref 'AWS::NoValue'
            - !If
              - IsSubsystemName
              - AttributeName: 'subsystemName'
                AttributeValue: !Ref SubsystemName
              - !Ref 'AWS::NoValue'
            - !If
              - IsDynamicMetadata
              - AttributeName: 'dynamicMetadata'
                AttributeValue: !Ref DynamicMetadata
              - !Ref 'AWS::NoValue'
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName:
            Ref: DeliveryStreamLogGroup
          LogStreamName:
            Ref: DeliveryStreamLogStream
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        RetryOptions:
          DurationInSeconds: 30
        S3BackupMode: FailedDataOnly
        S3Configuration:
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 5
          BucketARN: 
            !GetAtt BackupDataBucket.Arn
          CompressionFormat: GZIP
          RoleARN:
            !GetAtt FirehoseMetricsRole.Arn
        ProcessingConfiguration:
          Enabled: true
          Processors:
          - Type: Lambda
            Parameters:
              - ParameterName: LambdaArn
                ParameterValue: !Sub '${LambdaMetricsTagsProcessors.Arn}:$LATEST'
              - ParameterName: BufferSizeInMBs
                ParameterValue: '0.2'
              - ParameterName: BufferIntervalInSeconds
                ParameterValue: '61'

Outputs:
  BackupDataBucketName:
    Description: S3 Bucket where failed deliveries will be backed-up
    Value: !Sub '${AWS::StackName}-backup'
  CoralogixDeliveryLogsStreamARN:
    Description: The ARN for your Kinesis Firehose Delivery Stream, use this as the
      destination when adding CloudWatch Logs subscription filters
    Value:
      !GetAtt CoralogixDeliveryLogsStream.Arn
  CloudWatchLogsRoleARN:
    Description: The ARN for your CloudWatch Logs role to write to your delivery stream,
      use this as the role-arn when adding CloudWatch Logs subscription filters
    Value:
      !GetAtt CloudWatchLogsRole.Arn